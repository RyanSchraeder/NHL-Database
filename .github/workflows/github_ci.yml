# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Update Code and Deploy to Prefect

on:
  push:
    branches:
      - development

env:
  PROJECT: "nhl_data_pipeline"
  AWS_REGION: "us-east-1"                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "nhl_data_pipeline_ecr_repo"           # set this to your Amazon ECR repository name
  ECS_SERVICE: "nhl_data_pipeline_ecs_service"            # set this to your Amazon ECS service name
  ECS_CLUSTER: "nhl_data_pipeline_ecs_cluster"                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json  # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  BLOCK: 'nhl_pipeline_dev'
  CONTAINER_NAME: "nhl_data_pipeline_ecs_container"          # set this to the name of the container in the

jobs:
  install:
    name: Install CI/CD Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2     # default
          verbose: false # default
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Upgrade pip
        run: python3 -m pip install --upgrade pip
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Display AWS CLI version
        run: aws --version
        
  build:
    needs: install
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Install requirements.txt
        run: |
          python -m pip install tea "cup >= 3.2.13"
          pip install -r requirements.txt
      - name: Set environment variables
        run: |
          echo "SFUSER=${{ secrets.SFUSER }}" >> "$GITHUB_ENV"
          echo "SFPW=${{ secrets.SFPW }}" >> "$GITHUB_ENV"
          echo "SNOWFLAKE_ACCT=${{ secrets.SNOWFLAKE_ACCT }}" >> "$GITHUB_ENV"
          echo "SFWH=${{ secrets.SFWH }}" >> "$GITHUB_ENV"
          echo "SNOWFLAKE_DB=${{ secrets.SNOWFLAKE_DB }}" >> "$GITHUB_ENV"
          echo "SFSCHEMA=${{ secrets.SFSCHEMA }}" >> "$GITHUB_ENV"
          
          # SET THE PYTHONPATH TO THIS WORKSPACE
          echo "PYTHONPATH=${PYTHONPATH}:/home/runner/work/NHL-Database/NHL-Database/" >> "$GITHUB_ENV"
          
      - name: Prefect Auth
        uses: PrefectHQ/actions-prefect-auth@v1
        with:
          prefect-api-key: ${{ secrets.PREFECT_API_KEY }}
          prefect-workspace: ${{ secrets.PREFECT_WORKSPACE }}
      - name: Prefect Dry-Run
        run: |
          python3 src/scripts/snowflake_transfer.py seasons
          echo "Current working directory"
          pwd
          
  deploy:
    needs: build
    name: Run Prefect Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # - name: Deploy to Prefect 
      #   uses: PrefectHQ/actions-prefect-deploy@v3
      #   with:
      #     deployment-names: nhl_pipeline
      #     requirements-file-paths: requirements.txt
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add Prefect Cloud Secrets to SSM Parameter Store (needed for container in ECS task)
        id: aws
        run: |
          aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL }} --overwrite
          aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY }} --overwrite
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo "accountid=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
    #          echo ::set-output name=accountid::$AWS_ACCOUNT_ID

      - name: Create new ECR repository using AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1.1.0
        with:
          name: "${{ env.PROJECT }}-ecr"
          template: infrastructure/ecr_repository.yml
          parameter-overrides: "RepositoryName=${{ env.PROJECT }}"
          no-fail-on-empty-changeset: "1"

      - name: Flow deployment finished
        run: echo "ECR repository created at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
    
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          ls -ltr
          pwd
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Flow deployments finished
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1.1.0
        with:
          name: ${{ env.PROJECT }}
          template: infrastructure/ecs_cluster_prefect_agent.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "cpu=${{ github.event.inputs.cpu }},memory=${{ github.event.inputs.memory }},project=${{ env.PROJECT }},cluster=${{ env.ECS_CLUSTER }},image=${{ needs.ecr-repo.outputs.image }},awsaccountid=${{steps.aws.outputs.accountid}},region=${{ env.AWS_REGION }}"

      - name: ECS Service Deployment finished
        run: echo "ECS Service Deployment finished at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Generate task definition
        id: task-definition
        run: aws ecs describe-task-definition --task-definition $PROJECT --query taskDefinition > task-definition.json

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ECS task definition
          path: task-definition.json

      - name: Summary
        run: echo 'AWS ECS agent successfully deployed and ready to run your flows! :rocket:' >> $GITHUB_STEP_SUMMARY