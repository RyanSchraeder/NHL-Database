# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Update Code and Deploy to Prefect

on:
  push:
    branches:
      - development

env:
  AWS_REGION: "us-east-1"                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "nhl_data_pipeline_ecr_repo"           # set this to your Amazon ECR repository name
  ECS_SERVICE: "nhl_data_pipeline_ecs_service"            # set this to your Amazon ECS service name
  ECS_CLUSTER: "nhl_data_pipeline_ecs_cluster"                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json  # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: "nhl_data_pipeline_ecs_container"          # set this to the name of the container in the

jobs:
  install:
    name: Install CI/CD Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2     # default
          verbose: false # default
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Upgrade pip
        run: python3 -m pip install --upgrade pip
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Display AWS CLI version
        run: aws --version
        
  build:
    needs: install
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Install requirements.txt
        run: |
          python -m pip install tea "cup >= 3.2.13"
          pip install -r requirements.txt
      - name: Set environment variables
        run: |
          echo "SFUSER=${{ secrets.SFUSER }}" >> "$GITHUB_ENV"
          echo "SFPW=${{ secrets.SFPW }}" >> "$GITHUB_ENV"
          echo "SNOWFLAKE_ACCT=${{ secrets.SNOWFLAKE_ACCT }}" >> "$GITHUB_ENV"
          echo "SFWH=${{ secrets.SFWH }}" >> "$GITHUB_ENV"
          echo "SNOWFLAKE_DB=${{ secrets.SNOWFLAKE_DB }}" >> "$GITHUB_ENV"
          echo "SFSCHEMA=${{ secrets.SFSCHEMA }}" >> "$GITHUB_ENV"
          
          # SET THE PYTHONPATH TO THIS WORKSPACE
          echo "PYTHONPATH=${PYTHONPATH}:/home/runner/work/NHL-Database/NHL-Database/" >> "$GITHUB_ENV"
          
      - name: Prefect Auth
        uses: PrefectHQ/actions-prefect-auth@v1
        with:
          prefect-api-key: ${{ secrets.PREFECT_API_KEY }}
          prefect-workspace: ${{ secrets.PREFECT_WORKSPACE }}
      - name: Prefect Dry-Run
        run: |
          python3 src/scripts/snowflake_transfer.py seasons
          echo "Current working directory"
          pwd
          
  deploy:
    needs: build
    name: Run Prefect Deploy
    runs-on: ubuntu-latest
    steps:
      # - name: Deploy to Prefect 
      #   uses: PrefectHQ/actions-prefect-deploy@v3
      #   with:
      #     deployment-names: nhl_pipeline
      #     requirements-file-paths: requirements.txt
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
      
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: latest
          run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            ls -ltr
            pwd
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
      
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true
